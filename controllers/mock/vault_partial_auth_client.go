// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/projectsyn/lieutenant-keycloak-idp-controller/controllers (interfaces: VaultPartialAuthClient)
//
// Generated by this command:
//
//	mockgen -destination=./mock/vault_partial_auth_client.go -package mock . VaultPartialAuthClient
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	vault "github.com/hashicorp/vault-client-go"
	schema "github.com/hashicorp/vault-client-go/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockVaultPartialAuthClient is a mock of VaultPartialAuthClient interface.
type MockVaultPartialAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockVaultPartialAuthClientMockRecorder
}

// MockVaultPartialAuthClientMockRecorder is the mock recorder for MockVaultPartialAuthClient.
type MockVaultPartialAuthClientMockRecorder struct {
	mock *MockVaultPartialAuthClient
}

// NewMockVaultPartialAuthClient creates a new mock instance.
func NewMockVaultPartialAuthClient(ctrl *gomock.Controller) *MockVaultPartialAuthClient {
	mock := &MockVaultPartialAuthClient{ctrl: ctrl}
	mock.recorder = &MockVaultPartialAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultPartialAuthClient) EXPECT() *MockVaultPartialAuthClientMockRecorder {
	return m.recorder
}

// KubernetesLogin mocks base method.
func (m *MockVaultPartialAuthClient) KubernetesLogin(arg0 context.Context, arg1 schema.KubernetesLoginRequest, arg2 ...vault.RequestOption) (*vault.Response[map[string]interface{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KubernetesLogin", varargs...)
	ret0, _ := ret[0].(*vault.Response[map[string]interface{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesLogin indicates an expected call of KubernetesLogin.
func (mr *MockVaultPartialAuthClientMockRecorder) KubernetesLogin(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesLogin", reflect.TypeOf((*MockVaultPartialAuthClient)(nil).KubernetesLogin), varargs...)
}
