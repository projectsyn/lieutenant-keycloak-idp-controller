// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/projectsyn/lieutenant-keycloak-idp-controller/controllers (interfaces: PartialKeycloakClient)
//
// Generated by this command:
//
//	mockgen -destination=./mock/partial_keycloak_client.go -package mock . PartialKeycloakClient
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gocloak "github.com/Nerzal/gocloak/v13"
	gomock "go.uber.org/mock/gomock"
)

// MockPartialKeycloakClient is a mock of PartialKeycloakClient interface.
type MockPartialKeycloakClient struct {
	ctrl     *gomock.Controller
	recorder *MockPartialKeycloakClientMockRecorder
}

// MockPartialKeycloakClientMockRecorder is the mock recorder for MockPartialKeycloakClient.
type MockPartialKeycloakClientMockRecorder struct {
	mock *MockPartialKeycloakClient
}

// NewMockPartialKeycloakClient creates a new mock instance.
func NewMockPartialKeycloakClient(ctrl *gomock.Controller) *MockPartialKeycloakClient {
	mock := &MockPartialKeycloakClient{ctrl: ctrl}
	mock.recorder = &MockPartialKeycloakClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartialKeycloakClient) EXPECT() *MockPartialKeycloakClientMockRecorder {
	return m.recorder
}

// AddClientRolesToGroup mocks base method.
func (m *MockPartialKeycloakClient) AddClientRolesToGroup(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRolesToGroup", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRolesToGroup indicates an expected call of AddClientRolesToGroup.
func (mr *MockPartialKeycloakClientMockRecorder) AddClientRolesToGroup(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRolesToGroup", reflect.TypeOf((*MockPartialKeycloakClient)(nil).AddClientRolesToGroup), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateClient mocks base method.
func (m *MockPartialKeycloakClient) CreateClient(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockPartialKeycloakClientMockRecorder) CreateClient(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockPartialKeycloakClient)(nil).CreateClient), arg0, arg1, arg2, arg3)
}

// CreateClientRole mocks base method.
func (m *MockPartialKeycloakClient) CreateClientRole(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.Role) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientRole indicates an expected call of CreateClientRole.
func (mr *MockPartialKeycloakClientMockRecorder) CreateClientRole(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientRole", reflect.TypeOf((*MockPartialKeycloakClient)(nil).CreateClientRole), arg0, arg1, arg2, arg3, arg4)
}

// DeleteClient mocks base method.
func (m *MockPartialKeycloakClient) DeleteClient(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockPartialKeycloakClientMockRecorder) DeleteClient(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockPartialKeycloakClient)(nil).DeleteClient), arg0, arg1, arg2, arg3)
}

// GetClientRoles mocks base method.
func (m *MockPartialKeycloakClient) GetClientRoles(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.GetRoleParams) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoles indicates an expected call of GetClientRoles.
func (mr *MockPartialKeycloakClientMockRecorder) GetClientRoles(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoles", reflect.TypeOf((*MockPartialKeycloakClient)(nil).GetClientRoles), arg0, arg1, arg2, arg3, arg4)
}

// GetClients mocks base method.
func (m *MockPartialKeycloakClient) GetClients(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetClientsParams) ([]*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockPartialKeycloakClientMockRecorder) GetClients(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockPartialKeycloakClient)(nil).GetClients), arg0, arg1, arg2, arg3)
}

// GetGroupByPath mocks base method.
func (m *MockPartialKeycloakClient) GetGroupByPath(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByPath", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByPath indicates an expected call of GetGroupByPath.
func (mr *MockPartialKeycloakClientMockRecorder) GetGroupByPath(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByPath", reflect.TypeOf((*MockPartialKeycloakClient)(nil).GetGroupByPath), arg0, arg1, arg2, arg3)
}

// LoginAdmin mocks base method.
func (m *MockPartialKeycloakClient) LoginAdmin(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockPartialKeycloakClientMockRecorder) LoginAdmin(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockPartialKeycloakClient)(nil).LoginAdmin), arg0, arg1, arg2, arg3)
}

// LogoutPublicClient mocks base method.
func (m *MockPartialKeycloakClient) LogoutPublicClient(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutPublicClient", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutPublicClient indicates an expected call of LogoutPublicClient.
func (mr *MockPartialKeycloakClientMockRecorder) LogoutPublicClient(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutPublicClient", reflect.TypeOf((*MockPartialKeycloakClient)(nil).LogoutPublicClient), arg0, arg1, arg2, arg3, arg4)
}

// UpdateClient mocks base method.
func (m *MockPartialKeycloakClient) UpdateClient(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockPartialKeycloakClientMockRecorder) UpdateClient(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockPartialKeycloakClient)(nil).UpdateClient), arg0, arg1, arg2, arg3)
}
